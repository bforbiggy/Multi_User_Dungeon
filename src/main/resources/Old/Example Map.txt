CSV Format:
Length,Width,roomType[0=Reg,1=Start,2=End],Desc,
NumberOfExits,{exitID(s)}
EnemyCount
{isRandom,Name,Desc,Health,Attack,Defence,NumberOfItems,
{isRandom,Name,Desc,Value,Attack,Defence}},
ChestCount,ChestItems,
{isRandom,Name,Desc,Value,Attack,Defence},
MapLayout[0=Empty,C=Chest,E=Exit,T=Trap,N=NPC,P=Player,O=Obstacle]
-------------------------------------------------------------------------------------------------------------------
5,5,1,A room with a single enemy and a chest,
2,1,2,
1
N,Troll,A small troll,100,10,2,2
N,3,Sword,A Sword,100,1,0,
Y,2,
1,
2,
Y,2,
Y,3,
0,0,E,0,0,
0,C,0,0,0,
0,0,N,0,0,
0,0,0,0,0,
0,0,E,0,0
-------------------------------------------------------------------------------------------------------------------
This generation would create a room with a width and height of 5 and would define the room type as the start.
It would also generate a small description about what the room has in it.

On line 9 the amount of exits and their IDs would be specified. Each exit has an ID so it knows where to connect to in other rooms. There can only be 2 of each ID number and
one room can only have 1 instance of an ID.

From there on line 10 this would specify the amount of enemies in the room. Since there is one it moves to the next like to get the specifics on enemy generation.
Here it checks to see if the monster is randomized then looks for extra details if it isn't. Then it does a similar random check to see what items the NPC is holding.
Here it is holding 2 items, one of which is specified while the other is randomized.

Then on line 14 it checks for the amount of chests on the map and does a similar inventory generation that the enemy does for the content of the chest.

Finally, the map layout is represented. This is read by the csv reader and places the respective tile types at those locations. It takes the first of type that was given to it
for placing the objects. For example, if 3 monsters were generated, the first "E" tile would take the first monster from the front of a queue.

Once this is completed, the process can continue if a another format of this is put underneath it until the entire map is generated.

Specific item generation:
    0 = Regular Items: Name,Desc,Worth
    1 = Bag: Name,Desc,Worth,Size
    2 = Consumable: Name,Desc,Value,Health,Attack,Defence,Duration
    3 = Equippable: Name,Desc,Value,Health,Attack,Defence,Type(1=Weapon,0=Armor)